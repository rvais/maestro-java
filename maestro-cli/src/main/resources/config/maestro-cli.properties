#
# Copyright 2018 Otavio R. Piske <angusyoung@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# How many messages to send as warm-up
# warm-up.message.count=1000000
#
#
# The amount of time that maestro client waits for a response from the
# peers, when using a time-based duration for the tests, is determined
# by the duration of said test versus the multiplier given below (ie.:
# for 1m test, it waits as much as 2m for a response from the peers).
# duration.time.wait.multiplier=2
#
#
# The amount of time that maestro client waits for a response from the
# peers, when using a count-based duration for the tests, is determined
# by the calculated time of sending the warm-up count of messages divided
# by the given rate for the test, plus the base below. For example, for a
# warm-up of 1000000 messages sending 10k msgs/sec as the warm, the
# estimated duration would be 100 seconds + the base below, therefore
# totalling 190 seconds of wait time. For unbounded rate tests, defaults
# to the base value (90).
# duration.count.wait.base=90


# The warm up rate is calculated as a percent of the actual test rate.
# By default, the warm-up rate uses 30% of the given rate (when the test
# is using a fixed rate > 0). To adjust the warm-up rate value, change
# the setting below (ideally, it should be between 10 and 90).
# warm-up.rate.percent=30


# The maximum number of parallel count to use during the warm-up phase.
# Default to 30.
# warm-up.ceiling.parallel.count=30


# Cool down period, in seconds, between warm-up and test execution for
# fixed rate tests
# test.fixedrate.cooldown.period=1


# Default wait time, in seconds, for the workers to flush their data
# test.post.processing.wait.time=3

##### Advanced / Fix not to be changed #####

# Default unit rate when plotting HDR data (do not change).
#hdr.plotter.default.unit.rate=1000

# To discard the post test CO correction fix and use the legacy behavior
# hdr.plotter.legacy.mode=false


# When downloading files via broker, how much time, in seconds
# to wait until considering that all files have been downloaded
# download.broker.expiry=60

# How much time it will wait for each worker to complete its unit of work after processing and event
# that results in test stop
# maestro.worker.stop.timeout=1000

### Flush Wait settings ###
### When the systems running the backends are under load (which occurs for high scale tests) this cleanup
### period can take a long time. The settings bellow are used to control whether the front end needs to
### wait for this flush period to complete after the test run. Test warm up always take this into account.
###
### At the moment, this behavior is enforced only for the fixed rate test, but in the future will be enforced
### on the Incremental tests as well.

# If the number of parallel connections is greater than this value, the test will enforce the wait period
# flush.wait.hard.ceiling.parallel.count=100

# If the message size (in bytes) is greater than this value, the test executor will enforce the wait period
# flush.wait.hard.ceiling.message.size=10240

# If the parallel count is greater than this value and the message size is greater that the other value, the
# test executor will enforce the wait period
# flush.wait.soft.ceiling.parallel.count=30
# flush.wait.soft.ceiling.message.size=1024